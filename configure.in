AC_INIT(src/main.c)
AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(grisbi-0.6,0.6.0)
AM_ACLOCAL_INCLUDE(macros)
AM_MAINTAINER_MODE

AC_GNU_SOURCE

PACKAGE=grisbi-0.6
VERSION=0.6.0
AC_SUBST(PACKAGE)
AC_SUBST(VERSION)

dnl Standard checks
AC_ISC_POSIX
AC_PROG_CC
AC_STDC_HEADERS
AM_PROG_LIBTOOL
AC_LIBTOOL_DLOPEN_SELF
AC_SUBST(LIBTOOL_DEPS)
AC_SUBST(lt_prog_compiler_wl)
dnl Check if we have backtrace support
AC_CHECK_FUNCS(backtrace)

dnl Check for NLS support.                                                      
ALL_LINGUAS="cs da de es fa fr he it nl pl pt_BR ro ru zh_CN"
AM_GNU_GETTEXT
AC_CHECK_LIB(intl,main)


dnl
dnl Standard GTK checks
dnl
PKG_CHECK_MODULES(GTK, gtk+-2.0 >= 2.2.0 glib-2.0 >= 2.2)
LDFLAGS="${LDFLAGS} ${GTK_LIBS}"
CFLAGS="${CFLAGS} ${GTK_CFLAGS}"


dnl
dnl Check whether GLib modules are supported, to determine whether we
dnl can support plugins.
dnl
AC_MSG_CHECKING(whether GLib supports loadable modules)
ac_save_CFLAGS="$CFLAGS"
ac_save_LIBS="$LIBS"
CFLAGS="$CFLAGS $GLIB_CFLAGS"
LIBS="$GLIB_LIBS $LIBS"
AC_TRY_RUN([
#include <glib.h>
#include <gmodule.h>
#include <stdio.h>
#include <stdlib.h>

int 
main ()
{
  if (g_module_supported())
    return 0;	/* success */
  else
    return 1;	/* failure */
}
], ac_cv_glib_supports_modules=yes, ac_cv_glib_supports_modules=no,
   [echo $ac_n "cross compiling; assumed OK... $ac_c"
    ac_cv_glib_supports_modules=yes])
CFLAGS="$ac_save_CFLAGS"
LIBS="$ac_save_LIBS"
if test "$ac_cv_glib_supports_modules" = yes ; then
  AC_MSG_RESULT(yes)
  have_plugins=yes
else
  AC_MSG_RESULT(no)
  have_plugins=no
fi

dnl
dnl balance estimate
dnl
AC_ARG_WITH(balance_estimate,
[  --with-balance-estimate    add the support of balance estimate.],
[
  AC_DEFINE(ENABLE_BALANCE_ESTIMATE, 1, [Define if balance estimate is enabled])
])

dnl
dnl check whether plugins should be enabled and, if they should be,
dnl
AC_ARG_WITH(plugins,
[  --with-plugins    support plugins.],
[
  case "$withval" in
  "" | y | ye | yes )
    if test x$have_plugins = xno
    then
      AC_MSG_ERROR([GLib on this platform doesn't support loadable modules, so you can't enable plugins.])
    fi
    ;;
  n | no)
    have_plugins=no
    ;;
  *)
    if test x$have_plugins = xno
    then
      AC_MSG_ERROR([GLib on this platform doesn't support loadable modules, so you can't enable plugins.])
    fi
    ;;
  esac
])


dnl
dnl Where plugins are located
dnl
AM_CONDITIONAL(HAVE_PLUGINS, test x$have_plugins = xyes)
if test x$have_plugins = xyes
then
  AC_DEFINE(HAVE_PLUGINS, 1, [Define if plugins are enabled])
fi


dnl
dnl XML2
dnl
PKG_CHECK_MODULES(XML2, libxml-2.0 >= 2.0, , noxml2=true)
if test x$noxml2 == xtrue
then
	AC_MSG_RESULT([libxml2 support not available, this Grisbi build will not be able to load Gnucash files.])
	CFLAGS="${CFLAGS} -DNOXML2"
fi
AM_CONDITIONAL(HAVE_XML2, test x$noxml2 != xtrue)


dnl
dnl OpenSSL Check
dnl
PKG_CHECK_MODULES(OpenSSL, libssl, , nossl=true)
if test x$nossl == xtrue
then
	AC_MSG_RESULT([OpenSSL support not available, this Grisbi build will not be able to crypt/decrypt files.])
	CFLAGS="${CFLAGS} -DNOSSL"
fi
AM_CONDITIONAL(HAVE_SSL, test x$nossl != xtrue)


dnl
dnl Check for libofx
dnl
AC_CHECK_HEADER(libofx/libofx.h,,noofx=true)
AC_ARG_WITH(ofx,
    [  --without-ofx           build grisbi without ofx support [default=with]],
    [build_ofx=$withval],
    [build_ofx=yes]
)
if test x$build_ofx != xno
then
    if test x$noofx != xtrue
    then
        AC_CHECK_LIB(ofx, ofx_set_status_cb, HAVE_OFX_SET_STATUS_CB="true")
    else
        noofx=true
        AC_MSG_RESULT([Libofx header missing. Check your libofx installation])
    fi
else
    noofx=true
fi
AM_CONDITIONAL(HAVE_OFX, test x$noofx != xtrue)
AM_CONDITIONAL(HAVE_OFX_SET_STATUS_CB, test x$OFX_SET_STATUS_CB != xtrue)


dnl
dnl ElectricFence support
dnl
dnl --enable-electricfence flag
AC_ARG_ENABLE(electricfence,
	[AC_HELP_STRING([--enable-electricfence],
	[Enable compilation with ElectricFence (default=no)])],,
	enable_electricfence=no)
AC_CHECK_LIB(efence,malloc,electricfence=yes,electricfence=no)
if test "x$enable_electricfence" = xyes ; then
	if test "x$electricfence" = xyes ; then
		AC_MSG_WARN([ElectricFence is enabled])
		LDFLAGS="${LDFLAGS} -lefence"
	else
		AC_MSG_ERROR([Can't find the ElectriceFence library !])
	fi
fi

dnl
dnl WError support
dnl
AC_ARG_ENABLE(werror,
 	[AC_HELP_STRING([--enable-werror],
 	[Treates warning as errors (default=no)])],,
 	enable_werror=no)
if test "x$enable_werror" = xyes ; then
	if test "x$GCC" = "xyes" ; then
		CFLAGS="$CFLAGS -Wall -Werror"
		AC_MSG_WARN([Werror and Wall flags are enabled])
	else
		AC_MSG_WARN([WError and WAll can be enabled only with gcc])
	fi
fi

dnl
dnl GMemProfile support 
dnl
AC_ARG_ENABLE(gmemprofile,
 	[AC_HELP_STRING([--enable-gmemprofile],
 	[Outputs a summary of memory usage when grisbi terminates (default=no)])],,
 	enable_gmemprofile=no)
if test "x$enable_gmemprofile" = xyes ; then
	GSB_GMEMPROFILE=1
	AC_MSG_WARN([g_mem_profile is enabled])
else
	GSB_GMEMPROFILE=0
fi
AC_DEFINE_UNQUOTED([GSB_GMEMPROFILE], [${GSB_GMEMPROFILE}], 
	[define to 1 if g_mem_profile support is enabled])
AC_SUBST(GSB_GMEMPROFILE)


dnl
dnl NoOptim support 
dnl
AC_ARG_ENABLE(nooptim,
 	[AC_HELP_STRING([--enable-nooptim],
 	[Outputs a summary of memory usage when grisbi terminates (default=no)])],,
 	enable_nooptim=no)
if test "x$enable_nooptim" = xyes ; then
	CFLAGS="$CFLAGS -O0"
	AC_MSG_WARN([-O0 is enabled])
fi
AC_DEFINE_UNQUOTED([GSB_NOOPTIM], [${GSB_NOOPTIM}], 
	[define to 1 if g_no_optim support is enabled])
AC_SUBST(GSB_NOOPTIM)



AC_SUBST(GTK_LIBS)
AC_SUBST(GTK_CFLAGS)

AC_SUBST(XML2_LIBS)
AC_SUBST(XML2_CFLAGS)

AC_SUBST(prefix)
AC_SUBST(CFLAGS)
AC_SUBST(LDFLAGS)
AC_SUBST(export_dynamic_flag_spec_CXX)
AC_SUBST(export_dynamic_flag_spec)
AC_SUBST(lt_prog_compiler_wl)

dnl ******************************
dnl Makefiles
dnl ******************************

AC_OUTPUT([
Makefile
help/Makefile
help/C/Makefile
help/de/Makefile
help/en/Makefile
help/fr/Makefile
help/tips/Makefile
intl/Makefile
macros/Makefile
pixmaps/Makefile
pixmaps/flags/Makefile
po/Makefile.in
share/Makefile
share/categories/Makefile
share/categories/C/Makefile
share/categories/fr/Makefile
share/categories/fr_FR/Makefile
share/categories/de_DE/Makefile
share/categories/de_AT/Makefile
src/Makefile
src/plugins/gnucash/Makefile
src/plugins/ofx/Makefile
src/plugins/openssl/Makefile
])
