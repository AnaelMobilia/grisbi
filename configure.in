AC_INIT([grisbidev],[0.7.2])
AC_CONFIG_SRCDIR(src/main.c)
AC_CONFIG_HEADERS([config.h])
AC_CONFIG_MACRO_DIR([m4])

dnl Standard checks
AC_PROG_CC
AC_USE_SYSTEM_EXTENSIONS
AC_HEADER_STDC
dnl Check if we have backtrace support
AC_CHECK_FUNCS(backtrace)

AM_INIT_AUTOMAKE([-Wall foreign])

LT_INIT

dnl Check for NLS support.                                                      
AM_GLIB_GNU_GETTEXT
IT_PROG_INTLTOOL([0.40.0])

GETTEXT_PACKAGE=AC_PACKAGE_NAME
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE, "$GETTEXT_PACKAGE", [Gettext package.])

dnl
dnl Main Grisbi libraries
dnl
#PKG_CHECK_MODULES(GRISBI, [gtk+-2.0 >= 2.2.0 glib-2.0 >= 2.2 gmodule-2.0 >= 2.2 zlib])
# Temporary hack until Mandriva ships zlib.pc
PKG_CHECK_MODULES(GRISBI, [gtk+-2.0 >= 2.2.0 glib-2.0 >= 2.2 gmodule-2.0 >= 2.2])
GRISBI_LIBS="$GRISBI_LIBS -lz"
AC_SUBST(GRISBI_LIBS)
# </hack>

dnl
dnl Plugin support using glib's GModule
dnl
AC_ARG_WITH(plugins,
	AS_HELP_STRING([--with-plugins],[support plugins (default=auto)]),
	[build_plugins=$withval],
	[build_plugins=auto])

AC_MSG_CHECKING(whether GLib supports loadable modules)
gmodule_supported=`$PKG_CONFIG gmodule-2.0 --variable gmodule_supported`
if test "$gmodule_supported" = true ; then
	have_plugins=yes
else
	have_plugins=no
fi
AC_MSG_RESULT($have_plugins)

if test "$have_plugins" = no -a "$build_plugins" = yes; then
	AC_MSG_ERROR([GLib on this platform doesn't support loadable modules, so you can't enable plugins.])
fi
if test "$build_plugins" != no; then
	build_plugins=$have_plugins
else
	build_plugins=no
fi
if test "$build_plugins" = yes; then
	AC_DEFINE(HAVE_PLUGINS, 1, [Define if plugins are enabled])
fi
AM_CONDITIONAL(HAVE_PLUGINS, [test "$build_plugins" = yes])
AC_SUBST(plugindir,[$\(libdir\)/$\(PACKAGE\)])


dnl
dnl XML2
dnl
AC_ARG_WITH(libxml2,
	AS_HELP_STRING([--with-libxml2],[libxml2 support for the GnuCash plugin (default=auto)]),
	[build_libxml2=$withval],
	[build_libxml2=auto])

PKG_CHECK_MODULES(XML2, [libxml-2.0 >= 2.0], have_libxml2=yes, have_libxml2=no)
if test "$build_libxml2" = yes -a "$have_libxml2" = no; then
	AC_MSG_ERROR([Libxml2/GnuCash support was requested but libxml2 could not be found.])
fi
if test "$build_libxml2" != no; then
	build_libxml2=$have_libxml2
else
	build_libxml2=no
fi
if test "$build_libxml2" = no; then
	AC_DEFINE(NOXML2, 1, [Define if libxml2 support is disabled])
fi
AM_CONDITIONAL(HAVE_XML2, [test "$build_libxml2" = yes])


dnl
dnl OpenSSL Check
dnl
AC_ARG_WITH(openssl,
	AS_HELP_STRING([--with-openssl],[OpenSSL support for file encryption support (default=auto)]),
	[build_openssl=$withval],
	[build_openssl=auto])

PKG_CHECK_MODULES(OPENSSL, [libssl], have_openssl=yes, have_openssl=no)
if test "$build_openssl" = yes -a "$have_openssl" = no; then
	AC_MSG_ERROR([OpenSSL support was requested but libssl could not be found.])
fi
if test "$build_openssl" != no; then
	build_openssl=$have_openssl
else
	build_openssl=no
fi
if test "$build_openssl" = no; then
	AC_DEFINE(NOSSL, 1, [Define if OpenSSL support is disabled])
fi
AM_CONDITIONAL(HAVE_SSL, [test "$build_openssl" = yes])


dnl
dnl Check for cunit
dnl
AC_CHECK_HEADER(CUnit/Basic.h,,nocunit=true)
AC_ARG_WITH(cunit,
	AC_HELP_STRING([--with-cunit],
	[build grisbi with cunit tests [default=without]]),
	[build_cunit=$withval],
	[build_cunit=no]
)
if test x$build_cunit != xyes
then
	nocunit=true
else
	if test x$nocunit != xtrue
	then
		nocunit=false
		CUNIT_CFLAGS="-DHAVE_CUNIT"
		CUNIT_LIBS="-lcunit"
	else
		AC_MSG_RESULT([libcunit header missing. Check your libcunit installation])
	fi
fi
AC_SUBST(CUNIT_CFLAGS)
AC_SUBST(CUNIT_LIBS)
AM_CONDITIONAL(HAVE_CUNIT, test x$nocunit != xtrue)


dnl
dnl Check for libofx
dnl
AC_ARG_WITH(ofx,
	AS_HELP_STRING([--with-ofx],[build grisbi without ofx support (default=auto)]),
	[build_ofx=$withval]
	[build_ofx=auto])

PKG_CHECK_MODULES(LIBOFX, [libofx], have_ofx=yes, have_ofx=no)
if test "$build_ofx" = yes -a "$with_ofx" = no; then
	AC_MSG_ERROR([Ofx support was requested bug libofx could not be found.])
fi
if test "$build_ofx" != no; then
	build_ofx=$have_ofx
else
	build_ofx=no
fi
if test "$build_ofx" = yes; then
	PKG_CHECK_EXISTS([libofx >= 0.7], [AC_DEFINE([OFX_0_7], 1, [Build with libofx 0.7 or newer])])
fi
AM_CONDITIONAL(HAVE_OFX, [test "$build_ofx" = yes])


dnl
dnl WError support
dnl
AC_ARG_ENABLE(werror,
 	[AC_HELP_STRING([--enable-werror],
 	[Treates warning as errors (default=no)])],,
 	enable_werror=no)
if test "x$enable_werror" = xyes ; then
	if test "x$GCC" = "xyes" ; then
		CFLAGS="$CFLAGS -ansi -Wall -Wunused -Wno-unused-parameter -Wno-unused-function"
		AC_MSG_WARN([Wall and Wunused flags are enabled])
	else
		AC_MSG_WARN([Wall and Wunused can be enabled only with gcc])
	fi
fi

dnl
dnl GMemProfile support 
dnl
AC_ARG_ENABLE(gmemprofile,
 	[AC_HELP_STRING([--enable-gmemprofile],
 	[Outputs a summary of memory usage when grisbi terminates (default=no)])],,
 	enable_gmemprofile=no)
if test "x$enable_gmemprofile" = xyes ; then
	GSB_GMEMPROFILE=1
	AC_MSG_WARN([g_mem_profile is enabled])
else
	GSB_GMEMPROFILE=0
fi
AC_DEFINE_UNQUOTED([GSB_GMEMPROFILE], [${GSB_GMEMPROFILE}], 
	[define to 1 if g_mem_profile support is enabled])
AC_SUBST(GSB_GMEMPROFILE)


dnl
dnl NoOptim support 
dnl
AC_ARG_ENABLE(nooptim,
 	[AC_HELP_STRING([--enable-nooptim],
 	[Outputs a summary of memory usage when grisbi terminates (default=no)])],,
 	enable_nooptim=no)
if test "x$enable_nooptim" = xyes ; then
	CFLAGS="$CFLAGS -O0"
	AC_MSG_WARN([-O0 is enabled])
fi
AC_DEFINE_UNQUOTED([GSB_NOOPTIM], [${GSB_NOOPTIM}], 
	[define to 1 if g_no_optim support is enabled])
AC_SUBST(GSB_NOOPTIM)

dnl ******************************
dnl Makefiles
dnl ******************************

AC_CONFIG_FILES([
Makefile
help/Makefile
help/C/Makefile
help/de/Makefile
help/en/Makefile
help/fr/Makefile
pixmaps/Makefile
pixmaps/flags/Makefile
po/Makefile.in
share/Makefile
share/categories/Makefile
share/categories/C/Makefile
share/categories/fr/Makefile
share/categories/fr_FR/Makefile
share/categories/de_DE/Makefile
share/categories/de_AT/Makefile
share/categories/ru/Makefile
src/Makefile
src/tests/Makefile
src/plugins/gnucash/Makefile
src/plugins/ofx/Makefile
src/plugins/openssl/Makefile
])
AC_OUTPUT

echo "

                Build plugin support:  $build_plugins
                Build with libxml2:    $build_libxml2
                Build with OpenSSL:    $build_openssl
                Build with OFX plugin: $build_ofx

"
